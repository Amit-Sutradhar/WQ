#include <Wire.h>
#include "SD.h"
#include "SPI.h"
#include "DFRobot_ESP_PH.h"
#include "EEPROM.h"
#include <OneWire.h>
#include <DallasTemperature.h>
#include <RTClib.h>
#include "SoftwareSerial.h"


SoftwareSerial myGSM(25, 26);

RTC_DS3231 rtc;
String rtc_date_time;

File dataFile;
const char* SD_FILENAME = "/Node_1/Node_1.csv";


int turbidityPin = 1;
#define TdsSensorPin 34
#define VREF 3.3
#define SCOUNT 10

#define ONE_WIRE_BUS 32
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);

DFRobot_ESP_PH ph;
#define ESPADC 4096.0
#define ESPVOLTAGE 3300
#define PH_PIN 35

#define L298N_IN1 13
#define L298N_IN2 12
#define L298N_IN3 14
#define L298N_IN4 27
#define RELAY_PIN 15

int analogBuffer[SCOUNT];

float tdsValue = 0, temperature = 25, waterTemperature = 0, voltage, phValue, turbidity;

void setup() {
  myGSM.begin(9600);
  Serial.begin(9600);
  while (!Serial);
  
  pinMode(TdsSensorPin, INPUT);
  sensors.begin();
  EEPROM.begin(32);
  ph.begin();
  rtc_setup();
  SD_setup();
  
  pinMode(L298N_IN1, OUTPUT);
  pinMode(L298N_IN2, OUTPUT);
  pinMode(L298N_IN3, OUTPUT);
  pinMode(L298N_IN4, OUTPUT);
  pinMode(RELAY_PIN, OUTPUT);
  delay(1000);
  Serial.println("Initializing.....");
}

void loop() {
  // Turn on the relay for 3 seconds
  digitalWrite(RELAY_PIN, 0);
  Serial.println("Relay is ON");
  delay(12000);  // Keep the relay on for 3 seconds
  digitalWrite(RELAY_PIN, 1);
  Serial.println("Relay is OFF");
  delay(60000);

  // TDS, Water Temperature, Turbidity, and pH measurements
  static unsigned long analogSampleTimepoint = millis();
  if (millis() - analogSampleTimepoint > 40) {
    analogSampleTimepoint = millis();
    analogBuffer[0] = analogRead(TdsSensorPin);
  }

  static unsigned long printTimepoint = millis();
  if (millis() - printTimepoint > 800) {
    printTimepoint = millis();
    // TDS calculation
    float averageVoltage = analogBuffer[0] * VREF / 4095.0;
    float compensationCoefficient = 1.0 + 0.02 * (temperature - 25.0);
    float compensationVoltage = averageVoltage / compensationCoefficient;
    tdsValue = (133.42 * pow(compensationVoltage, 3) - 255.86 * pow(compensationVoltage, 2) + 857.39 * compensationVoltage) * 0.5;

    // Water temperature measurement
    sensors.requestTemperatures();
    waterTemperature = sensors.getTempCByIndex(0);

    Serial.print("TDS Value: ");
    Serial.print(tdsValue, 0);
    Serial.println(" ppm");

    Serial.print("Water Temperature: ");
    Serial.print(waterTemperature);
    Serial.println(" °C");

    turbidity = getTurbidity();
    Serial.print("Turbidity: ");
    Serial.println(turbidity);
  }

  // pH and SD card operations
  static unsigned long timepoint = millis();
  if (millis() - timepoint > 1000U) {
    timepoint = millis();
    voltage = analogRead(PH_PIN) / ESPADC * ESPVOLTAGE;
    Serial.print("Voltage:");
    Serial.println(voltage, 4);

    phValue = ph.readPH(voltage, temperature);
    Serial.print("pH:");
    Serial.println(phValue, 4);
  }

  ph.calibration(voltage, temperature);

  rtc_loop();
  SD_final();
  sendData();
  delay(5000);

  // // Pumps control logic
  // digitalWrite(L298N_IN1, HIGH);
  // digitalWrite(L298N_IN2, LOW);
  // digitalWrite(L298N_IN3, HIGH);
  // digitalWrite(L298N_IN4, LOW);
  // Serial.println("Pumps are ON");
  // delay(4000);  // Keep the pumps on for 4 seconds

  // // Turn off both pumps for 1 second
  // digitalWrite(L298N_IN1, LOW);
  // digitalWrite(L298N_IN2, LOW);
  // digitalWrite(L298N_IN3, LOW);
  // digitalWrite(L298N_IN4, LOW);
  // Serial.println("Pumps are OFF");
  // delay(1000);

  delay(1000 * 5 * 50);
}

float getTurbidity() {
  int sensorValue = analogRead(turbidityPin);
  float turbidity = map(sensorValue, 0, 4105, 1000, 0);
  Serial.print("Turbidity: ");
  Serial.print("   ");
  Serial.println(turbidity);

  if (turbidity < 30) {
    Serial.println("Water is CLEAN");
  } else if (turbidity >= 30 && turbidity < 60) {
    Serial.println("Water is MODERATE");
  } else {
    Serial.println("Water is DIRTY");
  }

  return turbidity;
}

void sendData() {
  while (myGSM.available()) {
    Serial.write(myGSM.read());
  }
  
  myGSM.println("AT");
  delay(500);
  myGSM.println("AT+CPIN?");
  delay(500);
  myGSM.println("AT+CREG?");
  delay(500);
  myGSM.println("AT+CGATT=1");
  delay(500);
  myGSM.println("AT+CIPSHUT");
  delay(1000);
  myGSM.println("AT+CIPSTATUS");
  delay(1000);
  myGSM.println("AT+CIPMUX=0");
  delay(1000);
  ShowSerialData();
  myGSM.println("AT+CSTT=\"airtelgprs\"");
  delay(1000);
  ShowSerialData();
  myGSM.println("AT+CIICR");
  delay(1000);
  ShowSerialData();
  myGSM.println("AT+CIFSR");
  delay(4000);
  ShowSerialData();
  myGSM.println("AT+CIPSPRT=0");
  delay(2000);
  ShowSerialData();
  myGSM.println("AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",\"80\"");
  delay(3000);
  ShowSerialData();
  myGSM.println("AT+CIPSEND");
  delay(3000);
  ShowSerialData();
  String str = "GET https://api.thingspeak.com/update?api_key=7IXIPJIL46Q2HXP4&field1=" + String(tdsValue) + "&field2=" + String(waterTemperature) + "&field3=" + String(voltage) + "&field4=" + String(phValue) + "&field5=" + String(turbidity);
  Serial.println(str);
  myGSM.println(str);
  delay(3000);
  ShowSerialData();
  myGSM.println((char)26);
  delay(1000);
  myGSM.println();
  ShowSerialData();
  myGSM.println("AT+CIPSHUT");
  delay(100);
  ShowSerialData();
  delay(1000);
}

void ShowSerialData() {
  while (myGSM.available() != 0) {
    Serial.write(myGSM.read());
  }
  delay(500);
}

void rtc_setup() {
  if (!rtc.begin() || rtc.lostPower()) {
    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
  }
  
}

void rtc_loop() {
 
  Serial.print("RTC Time: ");
  Serial.print(rtc.now().timestamp());
  rtc_date_time = rtc.now().timestamp();
}

void SD_setup() {
  if (!SD.begin()) {
    Serial.println("Card Mount Failed");
    return;
  }

  if (!SD.exists(SD_FILENAME)) {
    dataFile = SD.open(SD_FILENAME, FILE_WRITE);
    if (dataFile) {
      dataFile.println("created_at,tdsValue,waterTemperature,voltage,phValue,turbidity");
      dataFile.close();
      Serial.println("CSV file created successfully!");
    } else {
      Serial.println();
      Serial.println("Error creating CSV file");
    }
  } else {
    Serial.println();
    Serial.println("File exists, Appending to existing file");
  }
}

void SD_final() {
  dataFile = SD.open(SD_FILENAME, FILE_APPEND);
  if (dataFile) {
    dataFile.print(rtc_date_time);
    dataFile.print(",");
    Serial.println("Timestamp data updated successfully!");
    dataFile.print(tdsValue);
    dataFile.print(",");
    dataFile.print(waterTemperature);
    dataFile.print(",");
    Serial.println("---------- TDS, Temperature updated successfully! -------------");
    dataFile.print(voltage);
    dataFile.print(",");
    dataFile.print(phValue);
    dataFile.print(",");
    Serial.println("---------- Voltage, PH Value updated successfully! -------------");
    dataFile.print(turbidity);
    dataFile.print(",");
    Serial.println("---------- Turbidity updated successfully! -------------");
    dataFile.println("");
    Serial.println("---------- Updated successfully! -------------");
    dataFile.close();
  } else {
    Serial.println("-------------- Error updating ----------------");
  }
  Serial.printf("Used space: %lluMB\n", SD.usedBytes() / (1024 * 1024));


    // Pumps control logic
  digitalWrite(L298N_IN1, HIGH);
  digitalWrite(L298N_IN2, LOW);
  digitalWrite(L298N_IN3, HIGH);
  digitalWrite(L298N_IN4, LOW);
  Serial.println("Pumps are ON");
  delay(99000);  // Keep the pumps on for 4 seconds

  // Turn off both pumps for 1 second
  digitalWrite(L298N_IN1, LOW);
  digitalWrite(L298N_IN2, LOW);
  digitalWrite(L298N_IN3, LOW);
  digitalWrite(L298N_IN4, LOW);
  Serial.println("Pumps are OFF");
  delay(60000);
}//…….box2 done
